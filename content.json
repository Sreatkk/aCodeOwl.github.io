{"meta":{"title":"CodeOwl","subtitle":null,"description":"个人博客","author":"CodeOwl","url":""},"pages":[{"title":"about","date":"2018-12-12T14:14:36.000Z","updated":"2020-04-06T07:57:49.252Z","comments":false,"path":"about/index.html","permalink":"/about/index.html","excerpt":"","text":"[CodeOwl] 与&nbsp; CodeOwl&nbsp; 对话中... bot_ui_ini()","keywords":"关于"},{"title":"bangumi","date":"2019-02-10T13:32:48.000Z","updated":"2020-03-16T10:41:30.000Z","comments":false,"path":"bangumi/index.html","permalink":"/bangumi/index.html","excerpt":"","text":"","keywords":null},{"title":"lab","date":"2020-04-06T07:58:48.000Z","updated":"2020-04-06T08:01:48.175Z","comments":false,"path":"lab/index.html","permalink":"/lab/index.html","excerpt":"","text":"sakura主题balabala","keywords":"Lab实验室"},{"title":"donate","date":"2020-04-06T07:58:48.000Z","updated":"2020-04-06T08:01:48.184Z","comments":false,"path":"donate/index.html","permalink":"/donate/index.html","excerpt":"","text":"","keywords":"谢谢饲主了喵~"},{"title":"rss","date":"2018-12-20T15:09:03.000Z","updated":"2020-03-16T10:41:30.000Z","comments":true,"path":"rss/index.html","permalink":"/rss/index.html","excerpt":"","text":""},{"title":"comment","date":"2020-04-06T07:58:48.000Z","updated":"2020-04-06T07:58:51.058Z","comments":true,"path":"comment/index.html","permalink":"/comment/index.html","excerpt":"","text":"念两句诗 叙别梦、扬州一觉。 【宋代】吴文英《夜游宫·人去西楼雁杳》","keywords":"留言板"},{"title":"links","date":"2020-04-07T08:39:06.000Z","updated":"2020-04-07T14:12:31.192Z","comments":true,"path":"links/index.html","permalink":"/links/index.html","excerpt":"","text":"","keywords":"友人帐"},{"title":"music","date":"2018-12-20T15:14:28.000Z","updated":"2020-04-11T09:17:33.663Z","comments":false,"path":"music/index.html","permalink":"/music/index.html","excerpt":"","text":"","keywords":"喜欢的音乐"},{"title":"tags","date":"2018-12-12T14:14:16.000Z","updated":"2020-03-16T10:41:30.000Z","comments":true,"path":"tags/index.html","permalink":"/tags/index.html","excerpt":"","text":""},{"title":"theme-sakura","date":"2019-01-04T14:53:25.000Z","updated":"2020-04-07T13:27:06.885Z","comments":false,"path":"theme-sakura/index.html","permalink":"/theme-sakura/index.html","excerpt":"","text":"Hexo主题Sakura修改自WordPress主题Sakura，感谢原作者Mashiro","keywords":"Hexo 主题 Sakura 🌸"},{"title":"video","date":"2018-12-20T15:14:38.000Z","updated":"2020-03-16T10:41:30.000Z","comments":false,"path":"video/index.html","permalink":"/video/index.html","excerpt":"","text":"var videos = [ { img: 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '放送时间: 2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' }, { img : 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' } ] .should-ellipsis{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:95%;}.should-ellipsis-full{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:100%;}.should-ellipsis i{position:absolute;right:24px;}.grey-text{color:#9e9e9e !important}.grey-text.text-darken-4{color:#212121 !important}html{line-height:1.15;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}img{border-style:none}progress{display:inline-block;vertical-align:baseline}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}html{-webkit-box-sizing:border-box;box-sizing:border-box}*,*:before,*:after{-webkit-box-sizing:inherit;box-sizing:inherit}ul:not(.browser-default){padding-left:0;list-style-type:none}ul:not(.browser-default)>li{list-style-type:none}.card{-webkit-box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2);box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2)}.hoverable{-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s}.hoverable:hover{-webkit-box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19)}i{line-height:inherit}i.right{float:right;margin-left:15px}.bangumi .right{float:right !important}.material-icons{text-rendering:optimizeLegibility;-webkit-font-feature-settings:'liga';-moz-font-feature-settings:'liga';font-feature-settings:'liga'}.row{margin-left:auto;margin-right:auto;margin-bottom:20px}.row:after{content:\"\";display:table;clear:both}.row .col{float:left;-webkit-box-sizing:border-box;box-sizing:border-box;padding:0 .75rem;min-height:1px}.row .col.s12{width:100%;margin-left:auto;left:auto;right:auto}@media only screen and (min-width:601px){.row .col.m6{width:50%;margin-left:auto;left:auto;right:auto}}html{line-height:1.5;font-family:-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif;font-weight:normal;color:rgba(0,0,0,0.87)}@media only screen and (min-width:0){html{font-size:14px}}@media only screen and (min-width:992px){html{font-size:14.5px}}@media only screen and (min-width:1200px){html{font-size:15px}}.card{position:relative;margin:.5rem 0 1rem 0;background-color:#fff;-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s;border-radius:2px}.card .card-title{font-size:24px;font-weight:300}.card .card-title.activator{cursor:pointer}.card .card-image{position:relative}.card .card-image img{display:block;border-radius:2px 2px 0 0;position:relative;left:0;right:0;top:0;bottom:0;width:100%}.card .card-content{padding:24px;border-radius:0 0 2px 2px}.card .card-content p{margin:0}.card .card-content .card-title{display:block;line-height:32px;margin-bottom:8px}.card .card-content .card-title i{line-height:32px}.card .card-reveal{padding:24px;position:absolute;background-color:#fff;width:100%;overflow-y:auto;left:0;top:100%;height:100%;z-index:3;display:none}.card .card-reveal .card-title{cursor:pointer;display:block}.waves-effect{position:relative;cursor:pointer;display:inline-block;overflow:hidden;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-tap-highlight-color:transparent;vertical-align:middle;z-index:1;-webkit-transition:.3s ease-out;transition:.3s ease-out}.waves-effect img{position:relative;z-index:-1}.waves-block{display:block}::-webkit-input-placeholder{color:#d1d1d1}::-moz-placeholder{color:#d1d1d1}:-ms-input-placeholder{color:#d1d1d1}::-ms-input-placeholder{color:#d1d1d1}[type=\"radio\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"radio\"]:not(:checked)+span{position:relative;padding-left:35px;cursor:pointer;display:inline-block;height:25px;line-height:25px;font-size:1rem;-webkit-transition:.28s ease;transition:.28s ease;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border-radius:50%}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border:2px solid #5a5a5a}[type=\"radio\"]:not(:checked)+span:after{-webkit-transform:scale(0);transform:scale(0)}[type=\"checkbox\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"checkbox\"]:not(:checked):disabled+span:not(.lever):before{border:none;background-color:rgba(0,0,0,0.42)}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):before{width:0;height:0;border:3px solid transparent;left:6px;top:10px;-webkit-transform:rotateZ(37deg);transform:rotateZ(37deg);-webkit-transform-origin:100% 100%;transform-origin:100% 100%}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):after{height:20px;width:20px;background-color:transparent;border:2px solid #5a5a5a;top:0px;z-index:0}input[type=checkbox]:not(:disabled) ~ .lever:active:before,input[type=checkbox]:not(:disabled).tabbed:focus ~ .lever::before{-webkit-transform:scale(2.4);transform:scale(2.4);background-color:rgba(0,0,0,0.08)}input[type=range].focused:focus:not(.active)::-webkit-slider-thumb{-webkit-box-shadow:0 0 0 10px rgba(38,166,154,0.26);box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-moz-range-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-ms-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)} 番组计划 这里将是永远的回忆 window.onload = function(){ videos.forEach(function(video, i){ $('#rootRow').append(` ${video.title} ${video.jp} ${video.status} ${video.title} ${video.jp} 放送时间: ${video.time} ${video.desc} ${video.status} `) }) }","keywords":"B站"}],"posts":[{"title":"JavaScript变量的使用","slug":"JavaScript_3","date":"2020-04-16T08:50:00.000Z","updated":"2020-04-16T08:45:05.989Z","comments":true,"path":"2020/04/16/JavaScript_3/","link":"","permalink":"/2020/04/16/JavaScript_3/","excerpt":"","text":"变量的使用变量在使用时分为两步：1. 声明变量 2.赋值 1. 声明变量//声明变量 var age; //声明一个名称为age的变量 var是JS关键字，用来声明变量(variable变量的意思)。使用该关键字声明变量后，计算机会自动为变量分配内存空间，不需要程序员管 age是程序员定义的变量名，我们要通过变量名来访问内存中分配的空间 2. 赋值age = 18; //给age这个变量赋值为18 =用来把右边的值赋给左边的变量空间中，此处代表赋值的意思 变量值是程序员保存在变量空间的值 变量语法扩展1. 更新变量一个变量被重新赋值后，它原有的值就会被覆盖，变量值将以最后一次赋的值为准。 var age = 28; //最后的结果就是28，因为18被覆盖掉了 2. 同时声明多个变量同时声明多个变量时，只需要写一个var，多个变量名之间使用英文逗号隔开。 var age = 18, name = &#39;hello&#39;, tel = 2222; 3. 声明变量的特殊情况 情况 说明 结果 var age; console.log(age); 只声明 不赋值 undefined(未定义的) console.log(age); 不声明 不赋值 直接使用 报错 age=10; console.log(age); 不声明 只赋值 10 4. 变量命名规范 由字母（A-Z,a-z）、数字（0-9）、下划线（_）、美元符号（$）组成，如userName,_name 严格区分大小写。var app;和var = App;是两个不同的变量 不能以数字开头。18age是错误的 不能是关键字、保留字。例如：关键字var、for、while 变量必须有意义。 nl -&gt; age 遵守驼峰命名法。首字母小写，后面单词的首字母需要大写。myName注意：&lt;script&gt; console.log(name); //我们尽量不要用name作为变量名，因为name有着特殊的含义， console.log(age); //在控制台中，我们可以看到name输出为空，而age报错 &lt;/script&gt;","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"/tags/JavaScript/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"JavaScript输入输出语句","slug":"JavaScript_2","date":"2020-04-16T08:45:00.000Z","updated":"2020-04-16T08:43:35.126Z","comments":true,"path":"2020/04/16/JavaScript_2/","link":"","permalink":"/2020/04/16/JavaScript_2/","excerpt":"","text":"JS常用输入输出语句 方法 说明 归属 alter(msg) 浏览器弹出警示框 浏览器 console.log(msg) 浏览器控制台打印输出信息 浏览器 prompt(info) 浏览器弹出输入框，用户可以输入 浏览器 &lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;script&gt; // 这是一个输入框 prompt(&#39;请输入你的名字&#39;); // alert 弹出警示框 输出的 展示给用户的 alert(&#39;你的名字是&#39;); // console 控制台输出 给程序员测试用的 console.log(&#39;程序员能看到的测试信息&#39;); &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;/body&gt; &lt;/html&gt;","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"/tags/JavaScript/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"JavaScript的三种写法","slug":"JavaScript_1","date":"2020-04-16T08:43:00.000Z","updated":"2020-04-16T08:53:12.353Z","comments":true,"path":"2020/04/16/JavaScript_1/","link":"","permalink":"/2020/04/16/JavaScript_1/","excerpt":"","text":"行内式&lt;input type=&quot;button&quot; value=&quot;点我试试&quot; onclick=&quot;alert(&#39;Hello World&#39;)&quot;/&gt; 可以将单行或少量JS代码写在HTML标签的事件属性中（以on开头的属性），如：onclick 注意单双引号的使用：在HTML中我们推荐使用双引号，JS中我们推荐使用单引号 可读性差，在html中编写JS大量代码时，不方便阅读 引号易错，引号多层嵌套匹配，非常容易弄混 特殊情况下使用 内嵌式&lt;script&gt; alter(&#39;Hello World!&#39;); &lt;/script&gt; 可以将多行JS代码写到便签中 外部JS文件&lt;script src=&quot;js文件&quot;&gt;&lt;/script&gt; 利用HTML页面代码结构化，把大段JS代码独立到HTML页面之外，既美观，也方便文件级别的复用 引用外部JS文件的script便签中间不可以写代码 适合于JS代码量比较大的情况","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"/tags/JavaScript/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"黑盒测试等价类划分法-三角形问题","slug":"equivalenceclass","date":"2020-04-16T08:34:00.000Z","updated":"2020-04-16T08:34:21.566Z","comments":true,"path":"2020/04/16/equivalenceclass/","link":"","permalink":"/2020/04/16/equivalenceclass/","excerpt":"","text":"1.某程序规定：“输入三个整数a,b,c分别作为三边构成三角形。通过程序判定所构成的三角形的类型，当此三角形为一般三角形及等边三角形时，分别做计算…”。用等价类划分方法为该程序进行测试用例测试设计。（三角形问题的复杂之处在与输入与输出之间的关系比较复杂。）分析题目中给出和隐含的对输入条件的要求：（1）整数 （2）三个数 （3）非零数 （4）正数（5）两边之和大于第三边 （6）等腰 （7）等边 如果a,b,c满足条件（1）~（4），则输出下列四种情况之一： 如果不满足条件（5），则程序输出“非三角形”。 如果三条边相等则满足条件（7），则程序输出为“等边三角形”。 如果只有两条边相等、则满足条件（6），则程序输出为“等腰三角形”。 如果三条边都不相等，则程序输出为“一般三角形”。 列出等价类表并编号","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"软件测试","slug":"软件测试","permalink":"/tags/软件测试/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"软件测试简介","slug":"testingbasis","date":"2020-04-12T14:19:00.000Z","updated":"2020-04-12T14:19:23.192Z","comments":true,"path":"2020/04/12/testingbasis/","link":"","permalink":"/2020/04/12/testingbasis/","excerpt":"","text":"一、软件测试是什么 在规定的条件下对程序进行操作，以发现程序错误，衡量软件质量，并对其是否能满足设计要求进行评估的过程。 二、软件测试的分类按开发阶段划分 单元测试(Unit Testing) 单元测试，又称模块设计。对软件的组成单位进行测试，其目的是检测软件基本组成单元的正确性。测试的对象是软件测试的最小单元、模块。 测试阶段：编码后或者编码前 测试对象：模块 测试人员：白盒测试工程师或开发人员 测试依据：代码和注释+详细文档 测试方法：白盒测试 测试内容：模块接口测试、局部数据测试、路径测试、错误处理测试、边界测试 补充说明： (1)学习测试依据时，我们可以对比软件测试的“V”模型结合记忆 (2)白盒测试不是单元测试，单元测试是白盒测试。 (3)测试驱动开发，测试人员先编写测试用例，开发人员根据测试用例写程序 集成测试(Integration Testing) 集成测试也称为联合测试(联调)，组装测试：将程序模块采用适合的集成策略组装起来，对系统的接口及集成后的功能进行正确性检测工作。集成主要目的是检查软件单元之间的接口是否正确。 测试阶段：一般是单元测试之后 测试对象：模块间的接口 测试人员：白盒测试工程师或者开发工程师 测试依据：单元测试的文档+概要设计文档 测试方法：黑盒测试+白盒测试(灰盒测试) 测试内容: 模块之间数据传输、模块之间功能冲突、模块组装功能的正确性、全局数据结构、单模块缺陷对系统的影响 补充说明：单元测试是一个模块内部的测试，集成测试是在模块之间进行测试(至少两个) 系统测试(System Testing) 系统测试：将软件系统看成是一个系统的测试。包括对功能、性能以及软件所运行的软硬件环境进行测试。时间大部分在系统测试执行阶段，包括回归测试和冒烟测试。 测试阶段：集成测试阶段之后 测试对象：整个系统(软件、硬件) 测试人员：黑盒测试工程师 测试依据：需求规格说明文档 测试方法：黑盒测试 测试内容：功能、界面、可靠性、易用性、性能、兼容性、安全性等 补充说明： (1)系统测试是从完整的角度、广度去看待问题，不在看模块 (2)虽然系统测试包括冒烟测试和回归测试，但这三者之间有严格的先后顺序的，即:先冒烟、在系统、后回归。 (3)回归测试(Regression Testing)：指修改了旧的代码之后，重新进行测试以确认修改没有引入新的错误或导致其他代码产生错误。（自动回归测试将大幅度降低系统测试、维护升级等阶段的成本）。 (4)冒烟测试(Smoke Testing)：该术语来自硬件，指对一个硬件或一组硬件进行更改或修改后，直接给设备加点。如果没有冒烟，则该组件就通过了测试，也可理解为该种测试耗时短，仅用一袋烟的功夫就足够了。 冒烟测试的对象是每一个新编译的需要正式测试的软件版本，目的是确认软件基本功能正常，可以进行后续正式的测试工作。 冒烟测试的执行人是版本编译者。 冒烟测试一般在开发人员开发完毕后送给测试人员来进行测试时，测试人员会先进行冒烟测试，保证基本功能正常，不阻碍后续测试。 验收测试(Acceptance Testing) 验收测试(交互测试)：是部署软件之后的最后一个测试操作。他是技术测试的最后一个阶段，也称为交互测试。验收测试的目的是确保软件准备就绪，按照项目合同、任务书、双方约定的验证依据文档，向软件购买者展示该软件满足原始需求。 测试阶段：系统测试通过后 测试对象：整个系统(包括软硬件) 测试依据：用户需求、验收标准 测试方法：黑盒测试 测试内容：系统测试(功能、各类文档等) 下面，我们以手机为例，举个例子: 针对买回来的手机以及它的美颜功能来进行测试。 (1) 当买回来的手机，他的美颜功能有问题时，我们只针对美颜功能的代码进行测试，就是单元测试。 (2) 对于新买回来的手机，检测手机通讯录是否可以增添、删除、更改手机号码，打电话需要手动的输入电话，也可以在手机中查找，这就是集成测试。 (3) 新手机都会有一个合格标签，原因是出厂前手机厂商会对某一个型号的手机功能全部测试一遍，包括手机硬件本身，手机自带的app等，这个叫系统测试。 (4) 当修好新买回来的手机的美颜功能以后，用户除了会查看美颜功能是否完好，还会查看其它功能是否也完好，这个叫回归测试。 (5) 对于新买回来的手机，我们做的第一件事就是将常用的手机功能试一遍，第二件事就是将所有的功能都试一遍，这个叫冒烟测试。 (6) 对于新买回来的手机，一般都有7天包退 按是否查看代码划分 黑盒测试（Black-box Testing） 黑盒测试也是功能测试，测试中把被测的软件当成一个黑盒子，不关心盒子的内部结构是什么，只关心软件的输入数据和输出数据。 白盒测试（White-box Testing） 白盒测试又称为结构测试、透明盒测试、逻辑驱动测试或基于代码测试。白盒测试是指打开盒子，去研究里面的源代码和程序结果。 白盒测试也是接口测试的一种。 灰盒测试（Gray-Box Testing） 灰盒测试是介于白盒测试和黑盒测试之间的一种，灰盒测试多用于集成测试阶段，不仅关注输入、输出的正确性，同时也关注程序内部的情况。 灰盒测试：功能+接口","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"软件测试","slug":"软件测试","permalink":"/tags/软件测试/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"Git的配置与使用","slug":"git","date":"2020-04-09T14:48:00.000Z","updated":"2020-04-12T14:29:03.782Z","comments":true,"path":"2020/04/09/git/","link":"","permalink":"/2020/04/09/git/","excerpt":"","text":"git的配置用户信息配置个人的用户名和电子邮件地址 $ git config --global user.name &quot;用户名&quot; $ git config --global user.email &quot;电子邮件地址&quot; 文本编辑器设置Git默认使用的文本编辑器，一般可能会是Vi或者Vim。如果你有其他偏好，可以重新设置 $ git config --global core.editor 编辑器名 查看配置要检查已有的配置信息，可以使用git config –list命令 $ git config --list git的使用在命令行上创建新的存储库$ git init #git初始化 $ git clone &lt;repo&gt; # git克隆仓库 repo:远程仓库 $ git add . #添加当前项目的所有文件 $ git status #查看上次提交之后是否有修改 $ git commit -m &#39;提交信息&#39; #提交说明 $ git push #本地仓库提交到远端仓库 从命令行上推送现有存储库$ git remote add origin 仓库地址 $ git push -u origin master","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"git","slug":"git","permalink":"/tags/git/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"Hexo-Theme-Sakura","slug":"hello","date":"2020-04-07T13:00:00.000Z","updated":"2020-04-09T08:41:49.034Z","comments":true,"path":"2020/04/07/hello/","link":"","permalink":"/2020/04/07/hello/","excerpt":"","text":"本博客主题使用hexo-theme-sakura该hexo-theme-sakura主题是hojun基于创作者Mashiro的WordPress主题Sakura修改成hexo的主题。 在这里，特别感谢hojun和Mashiro。 在搭建该博客时，我遇到很多问题，在这里也必须感谢我的朋友Athink_。","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"/tags/hexo/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]}]}